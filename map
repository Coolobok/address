<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Карта адресов Рязани</title>
    <script src="https://api-maps.yandex.ru/2.1/?apikey=e99b0b22-e0ed-4965-89bd-c4ff4a9c1aed&lang=ru_RU"></script>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body, html { width: 100%; height: 100%; font-family: Arial; overflow: hidden; }
        #map-container { width: 100%; height: 100%; position: relative; }
        #map { width: 100%; height: 100%; }
        
        /* Блок фильтров слева */
        #filters-panel {
            position: absolute;
            left: 10px;
            top: 10px;
            width: 300px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            z-index: 1000;
        }
        
        .filter-section {
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        
        .filter-section h3 {
            margin-bottom: 8px;
            font-size: 14px;
            color: #555;
        }
        
        .checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .checkbox-item input {
            margin: 0;
        }
        
        .status-free { color: #4CAF50; font-size: 13px; }
        .status-occupied { color: #F44336; font-size: 13px; }
        
        /* Блок адресов справа */
        #address-panel {
            position: absolute;
            right: 10px;
            top: 10px;
            bottom: 10px;
            width: 300px;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            z-index: 999;
            display: flex;
            flex-direction: column;
            border-radius: 5px;
            overflow: hidden;
        }
        
        #panel-header {
            padding: 10px;
            background: #f5f5f5;
            border-bottom: 1px solid #ddd;
        }
        
        #address-list {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
        
        .address-item {
            padding: 8px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        
        .address-item:hover {
            background: #f9f9f9;
        }
        
        .address-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 3px;
        }
        
        .address-details {
            font-size: 12px;
            color: #666;
        }
        
        .copy-button {
            width: 100%;
            background: #2196F3;
            color: white;
            border: none;
            padding: 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        
        .copy-button:hover {
            background: #0b7dda;
        }
        
        .empty-list {
            padding: 10px;
            text-align: center;
            color: #666;
        }
        
        .cluster-balloon {
            max-height: 300px;
            overflow-y: auto;
            padding: 10px;
        }
        
        .cluster-item {
            margin-bottom: 8px;
            padding-bottom: 8px;
            border-bottom: 1px solid #eee;
        }
        
        .cluster-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <div id="map-container">
        <div id="map"></div>
        
        <!-- Блок фильтров слева -->
        <div id="filters-panel">
            <div class="filter-section">
                <h3>Статус:</h3>
                <div class="checkbox-group">
                    <label class="checkbox-item">
                        <input type="checkbox" class="status-filter" value="free" checked> 
                        <span class="status-free">Свободно</span>
                    </label>
                    <label class="checkbox-item">
                        <input type="checkbox" class="status-filter" value="occupied" checked> 
                        <span class="status-occupied">Занято</span>
                    </label>
                </div>
            </div>
            
            <div class="filter-section">
                <h3>Район:</h3>
                <div class="checkbox-group" id="districts-container">
                    <!-- Районы будут добавлены динамически -->
                </div>
            </div>
            
            <button id="apply-filters">Применить фильтры</button>
        </div>
        
        <!-- Блок адресов справа -->
        <div id="address-panel">
            <div id="panel-header">
                <h3>Адреса (<span id="address-count">0</span>)</h3>
            </div>
            <div id="address-list" class="empty-list">Загрузка данных...</div>
            <button id="copy-all" class="copy-button">Копировать список адресов</button>
        </div>
    </div>

    <script>
        // Google Sheets JSONP URL
        const SHEET_ID = '16xHTVeuOauyHYLH5RWuj_WzmGYFBYBZ5Uke-Nfeswr8';
        const JSONP_URL = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=responseHandler:handleSheetData&sheet=Filter`;
        
        let map, objectManager, currentAddresses = [];
        
        // Обработчик данных из Google Sheets
        window.handleSheetData = function(response) {
            if (!response?.table?.rows) {
                console.error('Неверный формат данных:', response);
                document.getElementById('address-list').innerHTML = 
                    '<div class="empty-list">Ошибка загрузки данных</div>';
                return;
            }
            
            processData(response);
        };
        
        // Загрузка данных через JSONP
        function loadData() {
            const script = document.createElement('script');
            script.src = JSONP_URL;
            script.onerror = () => {
                console.error('Ошибка загрузки данных');
                document.getElementById('address-list').innerHTML = 
                    '<div class="empty-list">Ошибка загрузки данных</div>';
            };
            document.body.appendChild(script);
        }
        
        ymaps.ready(() => {
            map = new ymaps.Map('map', {
                center: [54.6294, 39.7417],
                zoom: 12
            });
            
            // Создаем кастомный макет для балуна кластера
            const ClusterBalloonContentLayout = ymaps.templateLayoutFactory.createClass(
                '<h2 style="margin: 0 0 10px 0; font-size: 16px;">Адресов в кластере: {{properties.geoObjects.length}}</h2>' +
                '<div class="cluster-balloon">' +
                '{% for object in properties.geoObjects %}' +
                '<div class="cluster-item">' +
                '<div><strong>{{object.properties.address}}</strong></div>' +
                '<div>Статус: {{object.properties.fullStatus}}</div>' +
                '<div>Район: {{object.properties.district || "не указан"}}</div>' +
                '</div>' +
                '{% endfor %}' +
                '</div>'
            );
            
            objectManager = new ymaps.ObjectManager({
                clusterize: true,
                gridSize: 64,
                clusterDisableClickZoom: true,
                clusterBalloonContentLayout: ClusterBalloonContentLayout
            });
            
            objectManager.clusters.options.set('preset', 'islands#invertedBlueClusterIcons');
            objectManager.objects.options.set('preset', 'islands#circleDotIcon');
            
            map.geoObjects.add(objectManager);
            
            // Обработчики событий
            document.getElementById('apply-filters').addEventListener('click', applyFilters);
            document.getElementById('copy-all').addEventListener('click', copyAllAddresses);
            
            loadData();
        });
        
        function processData(data) {
            const districts = new Set();
            currentAddresses = [];
            objectManager.removeAll();
            
            resetDistrictFilter();
            
            data.table.rows.forEach((row, i) => {
                if (!row.c) return;
                
                const address = row.c[0]?.v || '';
                const lngStr = row.c[1]?.v || '';
                const latStr = row.c[2]?.v || '';
                const status = row.c[3]?.v || '';
                const district = row.c[4]?.v || '';
                
                if (!latStr || !lngStr) return;
                
                const lat = parseFloat(latStr.toString().replace(',', '.'));
                const lng = parseFloat(lngStr.toString().replace(',', '.'));
                
                if (isNaN(lat) || isNaN(lng)) return;
                
                if (district) districts.add(district);
                
                const isOccupied = status.includes('Занято');
                const iconColor = isOccupied ? '#F44336' : '#4CAF50';
                
                // Добавляем на карту
                objectManager.add({
                    id: i,
                    type: 'Feature',
                    geometry: { type: 'Point', coordinates: [lng, lat] },
                    properties: {
                        address: address,
                        fullStatus: status,
                        status: isOccupied ? 'occupied' : 'free',
                        district: district,
                        hintContent: address,
                        balloonContent: createBalloonContent(address, status, district, isOccupied)
                    },
                    options: {
                        iconColor: iconColor
                    }
                });
                
                // Добавляем в список
                currentAddresses.push({
                    id: i,
                    address: address,
                    status: status,
                    district: district,
                    coordinates: [lng, lat],
                    isOccupied: isOccupied
                });
            });
            
            populateDistrictFilter(districts);
            applyFilters();
            
            if (objectManager.objects.getLength() > 0) {
                map.setBounds(objectManager.getBounds(), { checkZoomRange: true });
            }
        }
        
        function applyFilters() {
            // Получаем выбранные статусы
            const statusCheckboxes = document.querySelectorAll('.status-filter:checked');
            const selectedStatuses = Array.from(statusCheckboxes).map(cb => cb.value);
            
            // Получаем выбранные районы
            const districtCheckboxes = document.querySelectorAll('.district-filter:checked');
            const selectedDistricts = Array.from(districtCheckboxes).map(cb => cb.value);
            
            // Фильтрация карты
            objectManager.setFilter(obj => 
                (selectedStatuses.length === 0 || selectedStatuses.includes(obj.properties.status)) &&
                (selectedDistricts.length === 0 || selectedDistricts.includes(obj.properties.district))
            );
            
            // Фильтрация списка
            const filtered = currentAddresses.filter(addr => 
                (selectedStatuses.length === 0 || selectedStatuses.includes(addr.isOccupied ? 'occupied' : 'free')) &&
                (selectedDistricts.length === 0 || selectedDistricts.includes(addr.district))
            );
            
            updateAddressList(filtered);
        }
        
        function updateAddressList(addresses) {
            const list = document.getElementById('address-list');
            const count = document.getElementById('address-count');
            
            count.textContent = addresses.length;
            
            if (addresses.length === 0) {
                list.innerHTML = '<div class="empty-list">Нет адресов, соответствующих фильтрам</div>';
                return;
            }
            
            list.innerHTML = '';
            addresses.forEach(addr => {
                const item = document.createElement('div');
                item.className = 'address-item';
                item.innerHTML = `
                    <div class="address-header">
                        <strong>${addr.address}</strong>
                        <span class="${addr.isOccupied ? 'status-occupied' : 'status-free'}">
                            ${addr.status}
                        </span>
                    </div>
                    <div class="address-details">
                        Район: ${addr.district || 'не указан'}
                    </div>
                `;
                item.addEventListener('click', () => {
                    map.setCenter(addr.coordinates, { checkZoomRange: true });
                });
                list.appendChild(item);
            });
        }
        
        function createBalloonContent(address, status, district, isOccupied) {
            return `
                <b>Адрес:</b> ${address}<br>
                <b>Статус:</b> <span class="${isOccupied ? 'status-occupied' : 'status-free'}">${status}</span><br>
                <b>Район:</b> ${district || 'не указан'}
            `;
        }
        
        function resetDistrictFilter() {
            document.getElementById('districts-container').innerHTML = '';
            
            // Добавляем опцию "Все районы"
            const allDistrictsItem = document.createElement('label');
            allDistrictsItem.className = 'checkbox-item';
            allDistrictsItem.innerHTML = `
                <input type="checkbox" class="district-filter" value="all" checked>
                <span>Все районы</span>
            `;
            document.getElementById('districts-container').appendChild(allDistrictsItem);
        }
        
        function populateDistrictFilter(districts) {
            const container = document.getElementById('districts-container');
            
            // Добавляем чекбоксы для каждого района
            districts.forEach(district => {
                const item = document.createElement('label');
                item.className = 'checkbox-item';
                item.innerHTML = `
                    <input type="checkbox" class="district-filter" value="${district}" checked>
                    <span>${district}</span>
                `;
                container.appendChild(item);
            });
            
            // Обработчик для чекбокса "Все районы"
            const allDistrictsCheckbox = container.querySelector('.district-filter[value="all"]');
            const districtCheckboxes = container.querySelectorAll('.district-filter:not([value="all"])');
            
            allDistrictsCheckbox.addEventListener('change', function() {
                districtCheckboxes.forEach(cb => {
                    cb.checked = this.checked;
                });
            });
            
            // Обработчики для чекбоксов районов
            districtCheckboxes.forEach(cb => {
                cb.addEventListener('change', function() {
                    if (!this.checked) {
                        allDistrictsCheckbox.checked = false;
                    } else {
                        // Проверяем, все ли районы выбраны
                        const allChecked = Array.from(districtCheckboxes).every(c => c.checked);
                        allDistrictsCheckbox.checked = allChecked;
                    }
                });
            });
        }
        
        async function copyAllAddresses() {
            const items = Array.from(document.querySelectorAll('.address-item'));
            if (items.length === 0) return;
            
            // Формируем чистый текст
            const text = items.map(item => {
                const addr = item.querySelector('strong').textContent.trim();
                const status = item.querySelector('span').textContent.trim();
                const district = item.querySelector('.address-details').textContent
                    .replace('Район:', '').trim();
                
                return `${addr} (${status}${district ? ', ' + district : ''})`;
            }).join('\n');
            
            try {
                await navigator.clipboard.writeText(text);
                alert('Список адресов скопирован в буфер обмена!');
            } catch (err) {
                console.error('Ошибка копирования:', err);
                alert('Не удалось скопировать список адресов');
            }
        }
    </script>
</body>
</html>
